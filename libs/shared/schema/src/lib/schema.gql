type Query {
  viewer: User!
}

type Mutation {
  createProject(input: CreateProjectInput!): Project!
}

input CreateProjectInput {
  name: String!
  description: String
  color: Color!
  adminUserId: ID!
  memberUserIds: [ID!]!
}

input UpdateProjectInput {
  id: ID!
  name: String!
  description: String
  color: Color!
  adminUserId: ID!
  memberUserIds: [ID!]!
}

type User implements Node {
  id: ID!
  name: String!
  icon: String
  projects: [Project!]!
}

type Backlog implements Node {
  id: ID!
  project: Project!
}

type Board implements Node {
  id: ID!
  name: String!
  description: String
  project: Project!
}

type Project implements Node {
  id: ID!
  name: String!
  description: String
  color: Color!
  backlog: Backlog!
  boards: [Board!]!
  members: [User!]!
  admin: User!
}

enum Color {
  RED
  BLUE
  GREEN
  YELLOW
  BROWN
  PINK
  GRAY
}

interface Node {
  id: ID!
}
