type Query {
  viewer: User!
  project(id: ID!): Project
  board(id: ID!): Board
  users: [User!]!
  task(id: ID!): Task
  taskGroup(id: ID!): TaskGroup
  subtask(id: ID!): Subtask
}

type Mutation {
  createProject(input: CreateProjectInput!): Project!
  updateProject(input: UpdateProjectInput!): Project!
  deleteProject(input: DeleteProjectInput!): Project!
  updateProjectMembers(input: UpdateProjectMembersInput!): Project!
  createBoard(input: CreateBoardInput!): Board!
  updateBoard(input: UpdateBoardInput!): Board!
  deleteBoard(input: DeleteBoardInput!): Board!
  createTaskOnBoard(input: CreateTaskOnBoardInput!): Task!
  createTaskOnTaskGroup(input: CreateTaskOnTaskGroupInput!): Task!
  updateTask(input: UpdateTaskInput!): Task!
  deleteTask(input: DeleteTaskInput!): Task!
  createTaskGroup(input: CreateTaskGroupInput!): TaskGroup!
  updateTaskGroup(input: UpdateTaskGroupInput!): TaskGroup!
  deleteTaskGroup(input: DeleteTaskGroupInput!): TaskGroup!
  createSubtask(input: CreateSubtaskInput!): Subtask!
  updateSubtask(input: UpdateSubtaskInput!): Subtask!
  deleteSubtask(input: DeleteSubtaskInput!): Subtask!
  updateMe(input: UpdateMeInput!): User!
}

type User implements Node {
  id: ID!
  name: String!
  icon: String
  projects: [Project!]!
}

type Board implements Node {
  id: ID!
  name: String!
  description: String
  project: Project!
  soloTasks: [Task!]!
  taskGroups: [TaskGroup!]!
  tasksOrder: [BoardTasksOrderItem!]!
  createdAt: Float!
}

type BoardTasksOrderItem {
  taskId: ID!
  type: BoardTaskType!
}

enum BoardTaskType {
  TASKGROUP
  TASK
}

type Project implements Node {
  id: ID!
  name: String!
  description: String
  color: Color!
  boards: [Board!]!
  members: [User!]!
  admin: User!
}

interface TaskBase {
  title: String!
  description: String
  assign: User
  scheduledTimeSec: Int
}

type Subtask implements Node {
  id: ID!
  title: String!
  description: String
  isDone: Boolean!
  assign: User
  task: Task!
  workTimeSec: Int!
  scheduledTimeSec: Int
  workStartDateTimestamp: Float
  createdAt: Float!
}

type Task implements Node {
  id: ID!
  title: String!
  description: String
  status: Status!
  subtasks: [Subtask!]!
  assign: User
  project: Project!
  board: Board!
  taskGroup: TaskGroup
  workTimeSec: Int!
  scheduledTimeSec: Int
  workStartDateTimestamp: Float
  subtasksOrder: [ID!]
  createdAt: Float!
}

type TaskGroup implements Node {
  id: ID!
  title: String!
  description: String
  status: Status!
  tasks: [Task!]!
  assign: User
  project: Project!
  board: Board!
  scheduledTimeSec: Int
  tasksOrder: [ID!]!
  createdAt: Float!
}

enum Color {
  RED
  BLUE
  GREEN
  YELLOW
  BROWN
  PINK
  GRAY
}

interface Node {
  id: ID!
}

enum Status {
  TODO
  INPROGRESS
  CONFIRM
  DONE
}

input CreateProjectInput {
  name: String!
  description: String
  color: Color!
  adminUserId: ID!
}

input UpdateProjectInput {
  id: ID!
  name: String!
  description: String
  color: Color!
  adminUserId: ID!
}

input UpdateProjectMembersInput {
  projectId: ID!
  addUserIds: [ID!]!
  removeUserIds: [ID!]!
}

input DeleteProjectInput {
  id: ID!
}

input CreateBoardInput {
  name: String!
  description: String
  projectId: ID!
}

input UpdateBoardInput {
  id: ID!
  name: String!
  description: String
  projectId: ID!
  tasksOrder: [BoardTasksOrderItemInput!]!
}

input DeleteBoardInput {
  id: ID!
}

input CreateTaskOnBoardInput {
  title: String!
  description: String
  assignUserId: ID
  boardId: ID!
  scheduledTimeSec: Int
}

input CreateTaskOnTaskGroupInput {
  title: String!
  description: String
  assignUserId: ID
  taskGroupId: ID!
  scheduledTimeSec: Int
}

input UpdateTaskInput {
  id: ID!
  title: String!
  description: String
  status: Status!
  assignUserId: ID
  workTimeSec: Int!
  scheduledTimeSec: Int
  workStartDateTimestamp: Float
  boardId: ID!
  subtasksOrder: [ID!]!
  taskGroupId: ID
}

input DeleteTaskInput {
  id: ID!
}

input CreateTaskGroupInput {
  title: String!
  description: String
  assignUserId: ID
  boardId: ID!
  scheduledTimeSec: Int
}

input UpdateTaskGroupInput {
  id: ID!
  title: String!
  description: String
  status: Status!
  assignUserId: ID
  scheduledTimeSec: Int
  boardId: ID!
  tasksOrder: [ID!]!
}

input DeleteTaskGroupInput {
  id: ID!
}

input CreateSubtaskInput {
  title: String!
  description: String
  assignUserId: ID
  taskId: ID!
  scheduledTimeSec: Int
}

input UpdateSubtaskInput {
  id: ID!
  title: String!
  description: String
  isDone: Boolean!
  assignUserId: ID
  workTimeSec: Int!
  scheduledTimeSec: Int
  workStartDateTimestamp: Float
  taskId: ID!
}

input DeleteSubtaskInput {
  id: ID!
}

input BoardTasksOrderItemInput {
  taskId: ID!
  type: BoardTaskType!
}

input UpdateMeInput {
  id: ID!
  name: String!
  icon: String
}
